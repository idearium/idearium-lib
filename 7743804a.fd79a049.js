(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{77:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return i})),t.d(r,"metadata",(function(){return l})),t.d(r,"rightToc",(function(){return s})),t.d(r,"default",(function(){return p}));var a=t(3),n=t(7),o=(t(0),t(92)),i={id:"log-http",title:"@idearium/log-http"},l={unversionedId:"log-http",id:"log-http",isDocsHomePage:!1,title:"@idearium/log-http",description:"The Idearium HTTP JSON logger middleware. Uses @idearium/log and pino-http under the hood.",source:"@site/docs/log-http.md",slug:"/log-http",permalink:"/idearium-lib/docs/log-http",editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/log-http.md",version:"current",sidebar:"sidebar",previous:{title:"@idearium/log",permalink:"/idearium-lib/docs/log"},next:{title:"@idearium/log-insightops",permalink:"/idearium-lib/docs/log-insightops"}},s=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Configuration",id:"configuration",children:[]}]},{value:"Error logging",id:"error-logging",children:[{value:"Error context",id:"error-context",children:[]}]},{value:"Middleware",id:"middleware",children:[{value:"<code>@idearium/log-http/middleware/log-error</code>",id:"ideariumlog-httpmiddlewarelog-error",children:[]},{value:"<code>@idearium/log-http/middleware/server-error</code>",id:"ideariumlog-httpmiddlewareserver-error",children:[]},{value:"<code>@idearium/log-http/middleware/not-found</code>",id:"ideariumlog-httpmiddlewarenot-found",children:[]}]},{value:"Entry points",id:"entry-points",children:[{value:"<code>@idearium/log-http</code>",id:"ideariumlog-http",children:[]},{value:"<code>@idearium/log-http/defaults</code>",id:"ideariumlog-httpdefaults",children:[]},{value:"<code>@idearium/log-http/err</code>",id:"ideariumlog-httperr",children:[]},{value:"<code>@idearium/log-http/req</code>",id:"ideariumlog-httpreq",children:[]},{value:"<code>@idearium/log-http/res</code>",id:"ideariumlog-httpres",children:[]}]},{value:"Formatters",id:"formatters",children:[]}],d={rightToc:s};function p(e){var r=e.components,t=Object(n.a)(e,["components"]);return Object(o.a)("wrapper",Object(a.a)({},d,t,{components:r,mdxType:"MDXLayout"}),Object(o.a)("p",null,"The Idearium HTTP JSON logger middleware. Uses ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"/idearium-lib/docs/log"}),"@idearium/log")," and ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pinojs/pino-http"}),"pino-http")," under the hood."),Object(o.a)("h2",{id:"installation"},"Installation"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ yarn add @idearium/log-http\n")),Object(o.a)("h2",{id:"usage"},"Usage"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-JavaScript"}),"const express = require('express');\nconst logger = require('@idearium/log-http')();\n\nconst app = express();\n\napp.use(logger);\n")),Object(o.a)("p",null,"The above produces the following log output:"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-JSON"}),'{\n  "level": 30,\n  "severity": "INFO",\n  "time": "2021-06-07T04:35:39.355Z",\n  "req": {\n    "headers": {\n      "x-forwarded-for": "10.0.0.12",\n      "host": "127.0.0.1:58937",\n      "connection": "close"\n    },\n    "id": 1,\n    "method": "GET",\n    "protocol": "http/1.1",\n    "referer": "",\n    "remoteAddress": "127.0.0.1",\n    "remoteIp": "10.0.0.12",\n    "remotePort": 58938,\n    "size": 0,\n    "url": "/",\n    "userAgent": ""\n  },\n  "res": { "headers": {}, "size": 11, "statusCode": 200 },\n  "responseTime": 0,\n  "message": "request completed"\n}\n')),Object(o.a)("h3",{id:"configuration"},"Configuration"),Object(o.a)("p",null,"You can use an options object to customise how @idearium/log-http works. It extends the default configuration provided by ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"/idearium-lib/docs/log"}),"@idearium/log"),". Consult ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"/idearium-lib/docs/log#configuration"}),"@idearium/log")," and ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pinojs/pino-http"}),"pino-http")," for more configuration options."),Object(o.a)("h4",{id:"serializers"},"Serializers"),Object(o.a)("p",null,"This package extends the standard serialisers provided by ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pinojs/pino-std-serializers"}),"pino-std-serializers")," with the following additional information:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"req",Object(o.a)("ul",{parentName:"li"},Object(o.a)("li",{parentName:"ul"},"protocol: The protocol (i.e. ",Object(o.a)("inlineCode",{parentName:"li"},"http/1.1"),")."),Object(o.a)("li",{parentName:"ul"},"remoteIp: The IP of the client making the request."))),Object(o.a)("li",{parentName:"ul"},"res",Object(o.a)("ul",{parentName:"li"},Object(o.a)("li",{parentName:"ul"},"size: The response size.")))),Object(o.a)("h2",{id:"error-logging"},"Error logging"),Object(o.a)("p",null,"There is a little more effort require to properly log ",Object(o.a)("inlineCode",{parentName:"p"},"next(new Error()))")," style errors that occur during the request response lifecycle."),Object(o.a)("p",null,"It involves using the ",Object(o.a)("inlineCode",{parentName:"p"},"@idearium/log-http/error-middleware")," entry point (which is middleware) and add this as the first error middleware (after all non-error middleware)."),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-JavaScript"}),"const express = require('express');\nconst requestLogger = require('@idearium/log-http')();\nconst errorLogger = require('@idearium/log-http/middleware/log-error')();\nconst serverError = require('@idearium/log-http/middleware/server-error')();\n\nconst app = express();\n\napp.use(requestLogger);\n\n// Other routes here\napp.get('/', (req, res) => res.send('Hello world'));\n\n// Generate errors in routes with:\napp.get('/error', (req, res, next) => next(new Error('Testing errors...')));\n\n// Put the error middleware last\napp.use(errorLogger);\napp.use(serverError);\n")),Object(o.a)("p",null,"The above produces the following log output when a request errors:"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-JSON"}),'{\n  "level": 50,\n  "severity": "ERROR",\n  "time": "2021-06-11T01:57:31.740Z",\n  "req": {\n    "headers": { "host": "127.0.0.1:51491", "connection": "close" },\n    "id": 1,\n    "method": "GET",\n    "protocol": "http/1.1",\n    "remoteAddress": "127.0.0.1",\n    "remoteIp": "127.0.0.1",\n    "remotePort": 51492,\n    "url": "/error"\n  },\n  "res": {\n    "headers": {\n      "x-powered-by": "Express",\n      "content-security-policy": "default-src \'none\'",\n      "x-content-type-options": "nosniff",\n      "content-type": "text/html; charset=utf-8",\n      "content-length": 1413\n    },\n    "size": 1413,\n    "statusCode": 500\n  },\n  "err": {\n    "@type": "type.googleapis.com/google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent",\n    "message": "Error: Testing errors...\\n    at app.get (/Developer/idearium-lib/packages/log-http/tests/index.test.js:61:18)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/Developer/idearium-lib/node_modules/express/lib/router/route.js:137:13)\\n    at Route.dispatch (/Developer/idearium-lib/node_modules/express/lib/router/route.js:112:3)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)\\n    at /idearium-lib/node_modules/express/lib/router/index.js:281:22\\n    at Function.process_params (/Developer/idearium-lib/node_modules/express/lib/router/index.js:335:12)\\n    at next (/Developer/idearium-lib/node_modules/express/lib/router/index.js:275:10)\\n    at loggingMiddleware (/Developer/idearium-lib/node_modules/pino-http/logger.js:131:7)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)"\n  },\n  "responseTime": 3,\n  "message": "request errored"\n}\n')),Object(o.a)("h3",{id:"error-context"},"Error context"),Object(o.a)("p",null,"You can also provide additional context with errors which will be logged with the error itself."),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-JavaScript"}),"(req, res, next) => {\n\n    const err = new Error('Error with context');\n\n    err.context = { code: 123 };\n\n    return next(err);\n\n}\n")),Object(o.a)("p",null,"This will produce the following ",Object(o.a)("inlineCode",{parentName:"p"},"err")," on the log:"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-JSON"}),'{\n  "err": {\n    "@type": "type.googleapis.com/google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent",\n    "message": "Error: Testing errors...\\n    at app.get (/Developer/idearium-lib/packages/log-http/tests/index.test.js:65:25)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/Developer/idearium-lib/node_modules/express/lib/router/route.js:137:13)\\n    at Route.dispatch (/Developer/idearium-lib/node_modules/express/lib/router/route.js:112:3)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)\\n    at /idearium-lib/node_modules/express/lib/router/index.js:281:22\\n    at Function.process_params (/Developer/idearium-lib/node_modules/express/lib/router/index.js:335:12)\\n    at next (/Developer/idearium-lib/node_modules/express/lib/router/index.js:275:10)\\n    at loggingMiddleware (/Developer/idearium-lib/node_modules/pino-http/logger.js:131:7)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)",\n    "context": { "code": 123 }\n  }\n}\n\n')),Object(o.a)("h2",{id:"middleware"},"Middleware"),Object(o.a)("p",null,"This package also offers some middleware."),Object(o.a)("h3",{id:"ideariumlog-httpmiddlewarelog-error"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log-http/middleware/log-error")),Object(o.a)("p",null,"This middleware is used to actually log any errors raised during the request/response lifecycle. It's use is demonstrated above."),Object(o.a)("h3",{id:"ideariumlog-httpmiddlewareserver-error"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log-http/middleware/server-error")),Object(o.a)("p",null,"This middleware will send any errors raised during the request/response lifecycle back to the client with a 500 status code."),Object(o.a)("p",null,"Use this just below the ",Object(o.a)("inlineCode",{parentName:"p"},"log-error")," middleware."),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-JavaScript"}),"const express = require('express');\nconst requestLogger = require('@idearium/log-http')();\nconst errorLogger = require('@idearium/log-http/middleware/log-error')();\nconst serverError = require('@idearium/log-http/middleware/server-error')();\n\nconst app = express();\n\napp.use(requestLogger);\n\n// Other routes here\n\n// Put the error middleware last\napp.use(errorLogger);\napp.use(serverError);\n")),Object(o.a)("h3",{id:"ideariumlog-httpmiddlewarenot-found"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log-http/middleware/not-found")),Object(o.a)("p",null,"When used last in the middleware stack, just before the error middleware, any request that wasn't handled by previous middleware will flow through and a 404 response will be sent back to the client."),Object(o.a)("p",null,"Use this just above the ",Object(o.a)("inlineCode",{parentName:"p"},"log-error")," middleware."),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-JavaScript"}),"const express = require('express');\nconst requestLogger = require('@idearium/log-http')();\nconst errorLogger = require('@idearium/log-http/middleware/log-error')();\nconst serverError = require('@idearium/log-http/middleware/server-error')();\nconst notFound = require('@idearium/log-http/middleware/not-found')();\n\nconst app = express();\n\napp.use(requestLogger);\n\n// Other routes here\n\n// Handle routes that weren't matched\napp.use(notFound);\n\n// Put the error middleware last\napp.use(errorLogger);\napp.use(serverError);\n")),Object(o.a)("h2",{id:"entry-points"},"Entry points"),Object(o.a)("p",null,"There are a few entry points this package. These entry points can be used as required and are useful for using the existing defaults as a starting point and then customising further as required."),Object(o.a)("h3",{id:"ideariumlog-http"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log-http")),Object(o.a)("p",null,"This is the primary entry point and is intended to be used as middleware with Node.js."),Object(o.a)("h3",{id:"ideariumlog-httpdefaults"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log-http/defaults")),Object(o.a)("p",null,"These are the defaults used by the package."),Object(o.a)("h3",{id:"ideariumlog-httperr"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log-http/err")),Object(o.a)("p",null,"This is the ",Object(o.a)("inlineCode",{parentName:"p"},"err")," serializer."),Object(o.a)("h3",{id:"ideariumlog-httpreq"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log-http/req")),Object(o.a)("p",null,"This is the ",Object(o.a)("inlineCode",{parentName:"p"},"req")," serializer."),Object(o.a)("h3",{id:"ideariumlog-httpres"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log-http/res")),Object(o.a)("p",null,"This is the ",Object(o.a)("inlineCode",{parentName:"p"},"res")," serializer."),Object(o.a)("h2",{id:"formatters"},"Formatters"),Object(o.a)("p",null,"This package extends what ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pinojs/pino-http"}),"pino-http")," provides out of the box, however, it does not reshape the logs as required by ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"https://cloud.google.com/logging/docs/structured-logging"}),"GCP Structured Logging"),"."),Object(o.a)("p",null,"You can use ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"log-structured"}),"@idearium/log-structured")," to take input from this package and reshape the log to include the ",Object(o.a)("inlineCode",{parentName:"p"},"httpRequest")," property."))}p.isMDXComponent=!0},92:function(e,r,t){"use strict";t.d(r,"a",(function(){return m}));var a=t(0),n=t.n(a);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=n.a.createContext({}),p=function(e){var r=n.a.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.a.createElement(n.a.Fragment,{},r)}},c=n.a.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,h=c["".concat(i,".").concat(m)]||c[m]||u[m]||o;return t?n.a.createElement(h,l(l({ref:r},d),{},{components:t})):n.a.createElement(h,l({ref:r},d))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);