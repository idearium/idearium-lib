(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{82:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),o=(a(0),a(92)),i={id:"log",title:"@idearium/log"},l={unversionedId:"log",id:"log",isDocsHomePage:!1,title:"@idearium/log",description:"The Idearium JSON logger. Uses Pino under the hood.",source:"@site/docs/log.md",slug:"/log",permalink:"/idearium-lib/docs/log",editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/log.md",version:"current",sidebar:"sidebar",previous:{title:"@idearium/lists",permalink:"/idearium-lib/docs/lists"},next:{title:"@idearium/log-http",permalink:"/idearium-lib/docs/log-http"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Configuration",id:"configuration",children:[]}]},{value:"Entry points",id:"entry-points",children:[{value:"<code>@idearium/log</code>",id:"ideariumlog",children:[]},{value:"<code>@idearium/log/defaults</code>",id:"ideariumlogdefaults",children:[]}]},{value:"Transports",id:"transports",children:[]}],p={rightToc:c};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.a)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.a)("p",null,"The Idearium JSON logger. Uses ",Object(o.a)("a",Object(n.a)({parentName:"p"},{href:"https://getpino.io/"}),"Pino")," under the hood."),Object(o.a)("h2",{id:"installation"},"Installation"),Object(o.a)("pre",null,Object(o.a)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"$ yarn add @idearium/log\n")),Object(o.a)("h2",{id:"usage"},"Usage"),Object(o.a)("pre",null,Object(o.a)("code",Object(n.a)({parentName:"pre"},{className:"language-JavaScript"}),"const log = require('@idearium/log')();\n\nlog.info('A simple example of @idearium/log');\n")),Object(o.a)("p",null,"The above produces the following log output:"),Object(o.a)("pre",null,Object(o.a)("code",Object(n.a)({parentName:"pre"},{}),"{\n    level: 30,\n    severity: 'INFO',\n    time: '2021-05-05T04:17:45.096Z',\n    'logging.googleapis.com/sourceLocation': {\n        file: '/tests/index.test.js'\n    },\n    message: 'A simple example of @idearium/log'\n}\n")),Object(o.a)("h3",{id:"configuration"},"Configuration"),Object(o.a)("p",null,"There are two methods to configure the Idearium logger:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"Using predefined environment variables for the most common configurations."),Object(o.a)("li",{parentName:"ul"},"Using an options object for complete customisation.")),Object(o.a)("h4",{id:"environment-variables"},"Environment variables"),Object(o.a)("p",null,"The Idearium logger can be configured with environment variables:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"LOG_ENABLED")," - Whether to enable the logger or not. Defaults to ",Object(o.a)("inlineCode",{parentName:"li"},"true"),"."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"LOG_LEVEL")," - The minimum log level to log. Defaults to ",Object(o.a)("inlineCode",{parentName:"li"},"info"),". Other accepted values are ",Object(o.a)("inlineCode",{parentName:"li"},"trace | debug | info | warn | error | fatal"),"."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"LOG_PRETTY_PRINT")," - Whether to pretty print the logs or not, useful for development. Defaults to ",Object(o.a)("inlineCode",{parentName:"li"},"false"),"."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"LOG_REDACT_PATHS")," - Optionally provide a comma separated list of paths to redact. ",Object(o.a)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/pinojs/pino/blob/master/docs/redaction.md#path-syntax"}),"https://github.com/pinojs/pino/blob/master/docs/redaction.md#path-syntax"))),Object(o.a)("h4",{id:"options"},"Options"),Object(o.a)("p",null,"Please be aware that the Idearium Logger has been setup to support ",Object(o.a)("a",Object(n.a)({parentName:"p"},{href:"https://cloud.google.com/logging/docs/structured-logging"}),"GCP structured logging")," and that altering any of the options could reduce the effectiveness of that integration."),Object(o.a)("p",null,Object(o.a)("strong",{parentName:"p"},Object(o.a)("inlineCode",{parentName:"strong"},"sourceLocation"))),Object(o.a)("p",null,"By default the logger will determine the file in which the log took place and put this information in the ",Object(o.a)("inlineCode",{parentName:"p"},"logging.googleapis.com/sourceLocation")," property. You can customise this by providing the ",Object(o.a)("inlineCode",{parentName:"p"},"sourceLocation")," option."),Object(o.a)("p",null,"Further to this, you can pass in any ",Object(o.a)("a",Object(n.a)({parentName:"p"},{href:"https://getpino.io/#/docs/api?id=options"}),"options supported by Pino"),"."),Object(o.a)("h2",{id:"entry-points"},"Entry points"),Object(o.a)("p",null,"There are a few entry points this package."),Object(o.a)("h3",{id:"ideariumlog"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log")),Object(o.a)("p",null,"This is the primary entry point and is intended to be use with Node.js."),Object(o.a)("h3",{id:"ideariumlogdefaults"},Object(o.a)("inlineCode",{parentName:"h3"},"@idearium/log/defaults")),Object(o.a)("p",null,"These are the defaults used by the package."),Object(o.a)("h2",{id:"transports"},"Transports"),Object(o.a)("p",null,"The Idearium logger does not support transports out of the box. See ",Object(o.a)("a",Object(n.a)({parentName:"p"},{href:"https://idearium.github.io/idearium-lib/docs/log"}),"@idearium/log-insightops")," for a transport for InsightOps."))}s.isMDXComponent=!0},92:function(e,t,a){"use strict";a.d(t,"a",(function(){return m}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return a?r.a.createElement(g,l(l({ref:t},p),{},{components:a})):r.a.createElement(g,l({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);