(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{75:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return u}));var n=r(3),i=r(7),o=(r(0),r(86)),a={id:"log-http",title:"@idearium/log-http"},l={unversionedId:"log-http",id:"log-http",isDocsHomePage:!1,title:"@idearium/log-http",description:"The Idearium HTTP JSON logger middleware. Uses @idearium/log and pino-http under the hood.",source:"@site/docs/log-http.md",slug:"/log-http",permalink:"/idearium-lib/docs/log-http",editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/log-http.md",version:"current",sidebar:"sidebar",previous:{title:"@idearium/log",permalink:"/idearium-lib/docs/log"},next:{title:"@idearium/log-insightops",permalink:"/idearium-lib/docs/log-insightops"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Configuration",id:"configuration",children:[]}]},{value:"Entry points",id:"entry-points",children:[{value:"<code>@idearium/log-http</code>",id:"ideariumlog-http",children:[]},{value:"<code>@idearium/log-http/defaults</code>",id:"ideariumlog-httpdefaults",children:[]}]},{value:"Formatters",id:"formatters",children:[]}],p={rightToc:c};function u(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The Idearium HTTP JSON logger middleware. Uses ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/idearium-lib/docs/log"}),"@idearium/log")," and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/pinojs/pino-http"}),"pino-http")," under the hood."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"$ yarn add @idearium/log-http\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-JavaScript"}),"const express = require('express');\nconst logger = require('@idearium/log-http')();\n\nconst app = express();\n\napp.use(logger);\n")),Object(o.b)("p",null,"The above produces the following log output:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"{\n      level: 30,\n      severity: 'INFO',\n      time: '2021-06-07T04:35:39.355Z',\n      req: {\n        headers: {\n          'x-forwarded-for': '10.0.0.12',\n          host: '127.0.0.1:58937',\n          connection: 'close'\n        },\n        id: 1,\n        method: 'GET',\n        protocol: 'http/1.1',\n        referer: '',\n        remoteAddress: '127.0.0.1',\n        remoteIp: '10.0.0.12',\n        remotePort: 58938,\n        size: 0,\n        url: '/',\n        userAgent: ''\n      },\n      res: { headers: {}, size: 11, statusCode: 200 },\n      responseTime: 0,\n      message: 'request completed'\n    }\n")),Object(o.b)("h3",{id:"configuration"},"Configuration"),Object(o.b)("p",null,"You can use an options object to customise how @idearium/log-http works. It extends the default configuration provided by ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/idearium-lib/docs/log"}),"@idearium/log"),". Consult ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/idearium-lib/docs/log#configuration"}),"@idearium/log")," and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/pinojs/pino-http"}),"pino-http")," for more configuration options."),Object(o.b)("h4",{id:"serializers"},"Serializers"),Object(o.b)("p",null,"This package extends the standard serialisers provided by ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/pinojs/pino-std-serializers"}),"pino-std-serializers")," with the following additional information:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"req",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"protocol: The protocol (i.e. ",Object(o.b)("inlineCode",{parentName:"li"},"http/1.1"),")."),Object(o.b)("li",{parentName:"ul"},"remoteIp: The IP of the client making the request."))),Object(o.b)("li",{parentName:"ul"},"res",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"size: The response size.")))),Object(o.b)("h2",{id:"entry-points"},"Entry points"),Object(o.b)("p",null,"There are a few entry points this package."),Object(o.b)("h3",{id:"ideariumlog-http"},Object(o.b)("inlineCode",{parentName:"h3"},"@idearium/log-http")),Object(o.b)("p",null,"This is the primary entry point and is intended to be used as middleware with Node.js."),Object(o.b)("h3",{id:"ideariumlog-httpdefaults"},Object(o.b)("inlineCode",{parentName:"h3"},"@idearium/log-http/defaults")),Object(o.b)("p",null,"These are the defaults used by the package."),Object(o.b)("h2",{id:"formatters"},"Formatters"),Object(o.b)("p",null,"This package extends what ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/pinojs/pino-http"}),"pino-http")," provides out of the box, however, it does not reshape the logs as required by ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://cloud.google.com/logging/docs/structured-logging"}),"GCP Structured Logging"),"."),Object(o.b)("p",null,"You can use ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"log-structured"}),"@idearium/log-structured")," to take input from this package and reshape the log to include the ",Object(o.b)("inlineCode",{parentName:"p"},"httpRequest")," property."))}u.isMDXComponent=!0},86:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return h}));var n=r(0),i=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=i.a.createContext({}),u=function(e){var t=i.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=u(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=u(r),b=n,h=s["".concat(a,".").concat(b)]||s[b]||d[b]||o;return r?i.a.createElement(h,l(l({ref:t},p),{},{components:r})):i.a.createElement(h,l({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var p=2;p<o;p++)a[p]=r[p];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);