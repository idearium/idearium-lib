"use strict";(self.webpackChunkidearium_lib_docs=self.webpackChunkidearium_lib_docs||[]).push([[705],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return h}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(t),g=o,h=p["".concat(s,".").concat(g)]||p[g]||m[g]||i;return t?n.createElement(h,a(a({ref:r},u),{},{components:t})):n.createElement(h,a({ref:r},u))}));function h(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=g;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=t[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},706:function(e,r,t){t.r(r),t.d(r,{assets:function(){return s},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var n=t(3117),o=(t(7294),t(3905));const i={id:"log-http",title:"@idearium/log-http"},a=void 0,l={unversionedId:"log-http",id:"log-http",title:"@idearium/log-http",description:"The Idearium HTTP JSON logger middleware. Uses @idearium/log and pino-http under the hood.",source:"@site/docs/log-http.md",sourceDirName:".",slug:"/log-http",permalink:"/idearium-lib/docs/log-http",draft:!1,editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/log-http.md",tags:[],version:"current",frontMatter:{id:"log-http",title:"@idearium/log-http"},sidebar:"sidebar",previous:{title:"@idearium/log",permalink:"/idearium-lib/docs/log"},next:{title:"@idearium/log-insightops",permalink:"/idearium-lib/docs/log-insightops"}},s={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Serializers",id:"serializers",level:4},{value:"Error logging",id:"error-logging",level:2},{value:"Error context",id:"error-context",level:3},{value:"Middleware",id:"middleware",level:2},{value:"<code>@idearium/log-http/middleware/log-error</code>",id:"ideariumlog-httpmiddlewarelog-error",level:3},{value:"<code>@idearium/log-http/middleware/server-error</code>",id:"ideariumlog-httpmiddlewareserver-error",level:3},{value:"<code>@idearium/log-http/middleware/not-found</code>",id:"ideariumlog-httpmiddlewarenot-found",level:3},{value:"Entry points",id:"entry-points",level:2},{value:"<code>@idearium/log-http</code>",id:"ideariumlog-http",level:3},{value:"<code>@idearium/log-http/defaults</code>",id:"ideariumlog-httpdefaults",level:3},{value:"<code>@idearium/log-http/err</code>",id:"ideariumlog-httperr",level:3},{value:"<code>@idearium/log-http/req</code>",id:"ideariumlog-httpreq",level:3},{value:"<code>@idearium/log-http/res</code>",id:"ideariumlog-httpres",level:3},{value:"Formatters",id:"formatters",level:2}],u={toc:d},p="wrapper";function m(e){let{components:r,...t}=e;return(0,o.kt)(p,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Idearium HTTP JSON logger middleware. Uses ",(0,o.kt)("a",{parentName:"p",href:"/idearium-lib/docs/log"},"@idearium/log")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino-http"},"pino-http")," under the hood."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add @idearium/log-http\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const express = require('express');\nconst logger = require('@idearium/log-http')();\n\nconst app = express();\n\napp.use(logger);\n")),(0,o.kt)("p",null,"The above produces the following log output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "level": 30,\n  "severity": "INFO",\n  "time": "2021-06-07T04:35:39.355Z",\n  "req": {\n    "headers": {\n      "x-forwarded-for": "10.0.0.12",\n      "host": "127.0.0.1:58937",\n      "connection": "close"\n    },\n    "id": 1,\n    "method": "GET",\n    "protocol": "http/1.1",\n    "referer": "",\n    "remoteAddress": "127.0.0.1",\n    "remoteIp": "10.0.0.12",\n    "remotePort": 58938,\n    "size": 0,\n    "url": "/",\n    "userAgent": ""\n  },\n  "res": { "headers": {}, "size": 11, "statusCode": 200 },\n  "responseTime": 0,\n  "message": "request completed"\n}\n')),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"You can use an options object to customise how @idearium/log-http works. It extends the default configuration provided by ",(0,o.kt)("a",{parentName:"p",href:"/idearium-lib/docs/log"},"@idearium/log"),". Consult ",(0,o.kt)("a",{parentName:"p",href:"/idearium-lib/docs/log#configuration"},"@idearium/log")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino-http"},"pino-http")," for more configuration options."),(0,o.kt)("h4",{id:"serializers"},"Serializers"),(0,o.kt)("p",null,"This package extends the standard serialisers provided by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino-std-serializers"},"pino-std-serializers")," with the following additional information:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"req",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"protocol: The protocol (i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},"http/1.1"),")."),(0,o.kt)("li",{parentName:"ul"},"remoteIp: The IP of the client making the request."))),(0,o.kt)("li",{parentName:"ul"},"res",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"size: The response size.")))),(0,o.kt)("h2",{id:"error-logging"},"Error logging"),(0,o.kt)("p",null,"There is a little more effort require to properly log ",(0,o.kt)("inlineCode",{parentName:"p"},"next(new Error()))")," style errors that occur during the request response lifecycle."),(0,o.kt)("p",null,"It involves using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@idearium/log-http/error-middleware")," entry point (which is middleware) and add this as the first error middleware (after all non-error middleware)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const express = require('express');\nconst requestLogger = require('@idearium/log-http')();\nconst errorLogger = require('@idearium/log-http/middleware/log-error')();\nconst serverError = require('@idearium/log-http/middleware/server-error')();\n\nconst app = express();\n\napp.use(requestLogger);\n\n// Other routes here\napp.get('/', (req, res) => res.send('Hello world'));\n\n// Generate errors in routes with:\napp.get('/error', (req, res, next) => next(new Error('Testing errors...')));\n\n// Put the error middleware last\napp.use(errorLogger);\napp.use(serverError);\n")),(0,o.kt)("p",null,"The above produces the following log output when a request errors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "level": 50,\n  "severity": "ERROR",\n  "time": "2021-06-11T01:57:31.740Z",\n  "req": {\n    "headers": { "host": "127.0.0.1:51491", "connection": "close" },\n    "id": 1,\n    "method": "GET",\n    "protocol": "http/1.1",\n    "remoteAddress": "127.0.0.1",\n    "remoteIp": "127.0.0.1",\n    "remotePort": 51492,\n    "url": "/error"\n  },\n  "res": {\n    "headers": {\n      "x-powered-by": "Express",\n      "content-security-policy": "default-src \'none\'",\n      "x-content-type-options": "nosniff",\n      "content-type": "text/html; charset=utf-8",\n      "content-length": 1413\n    },\n    "size": 1413,\n    "statusCode": 500\n  },\n  "err": {\n    "@type": "type.googleapis.com/google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent",\n    "message": "Error: Testing errors...\\n    at app.get (/Developer/idearium-lib/packages/log-http/tests/index.test.js:61:18)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/Developer/idearium-lib/node_modules/express/lib/router/route.js:137:13)\\n    at Route.dispatch (/Developer/idearium-lib/node_modules/express/lib/router/route.js:112:3)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)\\n    at /idearium-lib/node_modules/express/lib/router/index.js:281:22\\n    at Function.process_params (/Developer/idearium-lib/node_modules/express/lib/router/index.js:335:12)\\n    at next (/Developer/idearium-lib/node_modules/express/lib/router/index.js:275:10)\\n    at loggingMiddleware (/Developer/idearium-lib/node_modules/pino-http/logger.js:131:7)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)"\n  },\n  "responseTime": 3,\n  "message": "request errored"\n}\n')),(0,o.kt)("h3",{id:"error-context"},"Error context"),(0,o.kt)("p",null,"You can also provide additional context with errors which will be logged with the error itself."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JavaScript"},"(req, res, next) => {\n\n    const err = new Error('Error with context');\n\n    err.context = { code: 123 };\n\n    return next(err);\n\n}\n")),(0,o.kt)("p",null,"This will produce the following ",(0,o.kt)("inlineCode",{parentName:"p"},"err")," on the log:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "err": {\n    "@type": "type.googleapis.com/google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent",\n    "message": "Error: Testing errors...\\n    at app.get (/Developer/idearium-lib/packages/log-http/tests/index.test.js:65:25)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)\\n    at next (/Developer/idearium-lib/node_modules/express/lib/router/route.js:137:13)\\n    at Route.dispatch (/Developer/idearium-lib/node_modules/express/lib/router/route.js:112:3)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)\\n    at /idearium-lib/node_modules/express/lib/router/index.js:281:22\\n    at Function.process_params (/Developer/idearium-lib/node_modules/express/lib/router/index.js:335:12)\\n    at next (/Developer/idearium-lib/node_modules/express/lib/router/index.js:275:10)\\n    at loggingMiddleware (/Developer/idearium-lib/node_modules/pino-http/logger.js:131:7)\\n    at Layer.handle [as handle_request] (/Developer/idearium-lib/node_modules/express/lib/router/layer.js:95:5)",\n    "context": { "code": 123 }\n  }\n}\n\n')),(0,o.kt)("h2",{id:"middleware"},"Middleware"),(0,o.kt)("p",null,"This package also offers some middleware."),(0,o.kt)("h3",{id:"ideariumlog-httpmiddlewarelog-error"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log-http/middleware/log-error")),(0,o.kt)("p",null,"This middleware is used to actually log any errors raised during the request/response lifecycle. It's use is demonstrated above."),(0,o.kt)("h3",{id:"ideariumlog-httpmiddlewareserver-error"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log-http/middleware/server-error")),(0,o.kt)("p",null,"This middleware will send any errors raised during the request/response lifecycle back to the client with a 500 status code."),(0,o.kt)("p",null,"Use this just below the ",(0,o.kt)("inlineCode",{parentName:"p"},"log-error")," middleware."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const express = require('express');\nconst requestLogger = require('@idearium/log-http')();\nconst errorLogger = require('@idearium/log-http/middleware/log-error')();\nconst serverError = require('@idearium/log-http/middleware/server-error')();\n\nconst app = express();\n\napp.use(requestLogger);\n\n// Other routes here\n\n// Put the error middleware last\napp.use(errorLogger);\napp.use(serverError);\n")),(0,o.kt)("h3",{id:"ideariumlog-httpmiddlewarenot-found"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log-http/middleware/not-found")),(0,o.kt)("p",null,"When used last in the middleware stack, just before the error middleware, any request that wasn't handled by previous middleware will flow through and a 404 response will be sent back to the client."),(0,o.kt)("p",null,"Use this just above the ",(0,o.kt)("inlineCode",{parentName:"p"},"log-error")," middleware."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const express = require('express');\nconst requestLogger = require('@idearium/log-http')();\nconst errorLogger = require('@idearium/log-http/middleware/log-error')();\nconst serverError = require('@idearium/log-http/middleware/server-error')();\nconst notFound = require('@idearium/log-http/middleware/not-found')();\n\nconst app = express();\n\napp.use(requestLogger);\n\n// Other routes here\n\n// Handle routes that weren't matched\napp.use(notFound);\n\n// Put the error middleware last\napp.use(errorLogger);\napp.use(serverError);\n")),(0,o.kt)("h2",{id:"entry-points"},"Entry points"),(0,o.kt)("p",null,"There are a few entry points this package. These entry points can be used as required and are useful for using the existing defaults as a starting point and then customising further as required."),(0,o.kt)("h3",{id:"ideariumlog-http"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log-http")),(0,o.kt)("p",null,"This is the primary entry point and is intended to be used as middleware with Node.js."),(0,o.kt)("h3",{id:"ideariumlog-httpdefaults"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log-http/defaults")),(0,o.kt)("p",null,"These are the defaults used by the package."),(0,o.kt)("h3",{id:"ideariumlog-httperr"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log-http/err")),(0,o.kt)("p",null,"This is the ",(0,o.kt)("inlineCode",{parentName:"p"},"err")," serializer."),(0,o.kt)("h3",{id:"ideariumlog-httpreq"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log-http/req")),(0,o.kt)("p",null,"This is the ",(0,o.kt)("inlineCode",{parentName:"p"},"req")," serializer."),(0,o.kt)("h3",{id:"ideariumlog-httpres"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log-http/res")),(0,o.kt)("p",null,"This is the ",(0,o.kt)("inlineCode",{parentName:"p"},"res")," serializer."),(0,o.kt)("h2",{id:"formatters"},"Formatters"),(0,o.kt)("p",null,"This package extends what ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino-http"},"pino-http")," provides out of the box, however, it does not reshape the logs as required by ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/logging/docs/structured-logging"},"GCP Structured Logging"),"."),(0,o.kt)("p",null,"You can use ",(0,o.kt)("a",{parentName:"p",href:"log-structured"},"@idearium/log-structured")," to take input from this package and reshape the log to include the ",(0,o.kt)("inlineCode",{parentName:"p"},"httpRequest")," property."))}m.isMDXComponent=!0}}]);