"use strict";(self.webpackChunkidearium_lib_docs=self.webpackChunkidearium_lib_docs||[]).push([[878],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return c}});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=i.createContext({}),d=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=d(e.components);return i.createElement(u.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,c=p["".concat(u,".").concat(m)]||p[m]||g[m]||a;return n?i.createElement(c,r(r({ref:t},s),{},{components:n})):i.createElement(c,r({ref:t},s))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var d=2;d<a;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7796:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return r},default:function(){return g},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return d}});var i=n(3117),o=(n(7294),n(3905));const a={id:"log",title:"@idearium/log"},r=void 0,l={unversionedId:"log",id:"log",title:"@idearium/log",description:"The Idearium JSON logger. Uses Pino under the hood.",source:"@site/docs/log.md",sourceDirName:".",slug:"/log",permalink:"/idearium-lib/docs/log",draft:!1,editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/log.md",tags:[],version:"current",frontMatter:{id:"log",title:"@idearium/log"},sidebar:"sidebar",previous:{title:"@idearium/lists",permalink:"/idearium-lib/docs/lists"},next:{title:"@idearium/log-http",permalink:"/idearium-lib/docs/log-http"}},u={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Environment variables",id:"environment-variables",level:4},{value:"Options",id:"options",level:4},{value:"Entry points",id:"entry-points",level:2},{value:"<code>@idearium/log</code>",id:"ideariumlog",level:3},{value:"<code>@idearium/log/defaults</code>",id:"ideariumlogdefaults",level:3},{value:"<code>@idearium/log/multi</code>",id:"ideariumlogmulti",level:3},{value:"Examples",id:"examples",level:4},{value:"Standard setup",id:"standard-setup",level:5},{value:"Setup for debugging",id:"setup-for-debugging",level:5},{value:"Error logging in standard setup",id:"error-logging-in-standard-setup",level:5},{value:"Error logging in debug setup",id:"error-logging-in-debug-setup",level:5},{value:"Transports",id:"transports",level:2}],s={toc:d},p="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Idearium JSON logger. Uses ",(0,o.kt)("a",{parentName:"p",href:"https://getpino.io/"},"Pino")," under the hood."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add @idearium/log\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const log = require('@idearium/log')();\n\nlog.info('A simple example of @idearium/log');\n")),(0,o.kt)("p",null,"The above produces the following log output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n    level: 30,\n    severity: 'INFO',\n    time: '2021-05-05T04:17:45.096Z',\n    'logging.googleapis.com/sourceLocation': {\n        file: '/tests/index.test.js'\n    },\n    message: 'A simple example of @idearium/log'\n}\n")),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"There are two methods to configure the Idearium logger:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using predefined environment variables for the most common configurations."),(0,o.kt)("li",{parentName:"ul"},"Using an options object for complete customisation.")),(0,o.kt)("h4",{id:"environment-variables"},"Environment variables"),(0,o.kt)("p",null,"The Idearium logger can be configured with environment variables:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LOG_ENABLED")," - Whether to enable the logger or not. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LOG_LEVEL")," - The minimum log level to log. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"info"),". Other accepted values are ",(0,o.kt)("inlineCode",{parentName:"li"},"trace | debug | info | warn | error | fatal"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LOG_PRETTY_PRINT")," - Whether to pretty print the logs or not, useful for development. Defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LOG_REDACT_PATHS")," - Optionally provide a comma separated list of paths to redact. ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/pinojs/pino/blob/master/docs/redaction.md#path-syntax"},"https://github.com/pinojs/pino/blob/master/docs/redaction.md#path-syntax"))),(0,o.kt)("h4",{id:"options"},"Options"),(0,o.kt)("p",null,"Please be aware that the Idearium Logger has been setup to support ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/logging/docs/structured-logging"},"GCP structured logging")," and that altering any of the options could reduce the effectiveness of that integration."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"sourceLocation"))),(0,o.kt)("p",null,"By default the logger will determine the file in which the log took place and put this information in the ",(0,o.kt)("inlineCode",{parentName:"p"},"logging.googleapis.com/sourceLocation")," property. You can customise this by providing the ",(0,o.kt)("inlineCode",{parentName:"p"},"sourceLocation")," option."),(0,o.kt)("p",null,"Further to this, you can pass in any ",(0,o.kt)("a",{parentName:"p",href:"https://getpino.io/#/docs/api?id=options"},"options supported by Pino"),"."),(0,o.kt)("h2",{id:"entry-points"},"Entry points"),(0,o.kt)("p",null,"There are a few entry points this package."),(0,o.kt)("h3",{id:"ideariumlog"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log")),(0,o.kt)("p",null,"This is the primary entry point and is intended to be use with Node.js."),(0,o.kt)("h3",{id:"ideariumlogdefaults"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log/defaults")),(0,o.kt)("p",null,"These are the defaults used by the package."),(0,o.kt)("h3",{id:"ideariumlogmulti"},(0,o.kt)("inlineCode",{parentName:"h3"},"@idearium/log/multi")),(0,o.kt)("p",null,"Use this to log different data depending on the ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL"),". It's very useful for including more information when setting ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," without producing more log messages."),(0,o.kt)("p",null,"The levels are defined in order as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"trace")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"debug")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"info")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"warn")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fatal"))),(0,o.kt)("p",null,"Multi accepts two parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"data"),": an object containing nested objects, keyed by the name of the level, which should be included or excluded based on ",(0,o.kt)("inlineCode",{parentName:"li"},"LOG_LEVEL"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"message"),": which will always appear unchanged with the combined data.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"multi")," produces a log at the level defined by the highest log level provided in ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"multi")," combines the nested objects into one object for logging, and includes any nested object keyed by a level name which is equal to or higher than the ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL")," environment variable."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"multi")," has the following attributes, when given the same parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Will always produce a log at the same level regardless of ",(0,o.kt)("inlineCode",{parentName:"li"},"LOG_LEVEL"),"."),(0,o.kt)("li",{parentName:"ul"},"Will always produce a log with the same message, meaning you can rely on the log message for filtering, regardless of ",(0,o.kt)("inlineCode",{parentName:"li"},"LOG_LEVEL"),"."),(0,o.kt)("li",{parentName:"ul"},"Can exclude or include more information based on ",(0,o.kt)("inlineCode",{parentName:"li"},"LOG_LEVEL"),"."),(0,o.kt)("li",{parentName:"ul"},"Does not produce more logs when turning on a lower log level, but can include additional information.")),(0,o.kt)("h4",{id:"examples"},"Examples"),(0,o.kt)("h5",{id:"standard-setup"},"Standard setup"),(0,o.kt)("p",null,"The following produces a log at the ",(0,o.kt)("inlineCode",{parentName:"p"},"info")," level, because that is the highest level defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),". It excludes the nested ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," object because ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"info"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// LOG_LEVEL = 'info';\n\nmulti({\n    debug: { debug: 'debug' },\n    info: { info: 'info' },\n}, 'Log at info level, excluding debug data.');\n\n// produces:\n{\n    level: 30,\n    severity: 'INFO',\n    time: '2023-03-05T23:42:13.085Z',\n    'logging.googleapis.com/sourceLocation': {\n        file: '/idearium-lib/packages/log/tests/multi.test.js'\n    },\n    info: 'info',\n    message: 'Log at info level, excluding debug data.'\n}\n")),(0,o.kt)("h5",{id:"setup-for-debugging"},"Setup for debugging"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// LOG_LEVEL = 'debug';\n\nmulti({\n    debug: { debug: 'debug' },\n    info: { info: 'info' },\n}, 'Log at info level, include debug data.');\n\n// produces:\n{\n    level: 30,\n    severity: 'INFO',\n    time: '2023-03-05T23:42:13.085Z',\n    'logging.googleapis.com/sourceLocation': {\n        file: '/idearium-lib/packages/log/tests/multi.test.js'\n    },\n    debug: 'debug',\n    info: 'info',\n    message: 'Log at info level, include debug data.'\n}\n")),(0,o.kt)("h5",{id:"error-logging-in-standard-setup"},"Error logging in standard setup"),(0,o.kt)("p",null,"The following produces a log at the ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," level, because that is the highest level defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),". It excludes the nested ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," object because ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"info"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// LOG_LEVEL = 'info';\n\nmulti({\n    debug: { debug: 'debug' },\n    error: { error: 'error' },\n}, 'Log at error level, excluding debug data.');\n\n// produces:\n{\n    level: 50,\n    severity: 'ERROR',\n    time: '2023-03-05T23:42:13.085Z',\n    'logging.googleapis.com/sourceLocation': {\n        file: '/idearium-lib/packages/log/tests/multi.test.js'\n    },\n    error: 'error',\n    message: 'Log at error level, excluding debug data.'\n}\n")),(0,o.kt)("h5",{id:"error-logging-in-debug-setup"},"Error logging in debug setup"),(0,o.kt)("p",null,"The following produces a log at the ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," level, because that is the highest level defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),". It includes the nested ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," object because ",(0,o.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"debug"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// LOG_LEVEL = 'debug';\n\nmulti({\n    debug: { debug: 'debug' },\n    error: { error: 'error' },\n}, 'Log at error level, including debug data.');\n\n// produces:\n{\n    level: 50,\n    severity: 'ERROR',\n    time: '2023-03-05T23:42:13.085Z',\n    'logging.googleapis.com/sourceLocation': {\n        file: '/idearium-lib/packages/log/tests/multi.test.js'\n    },\n    debug: 'debug'\n    error: 'error',\n    message: 'Log at error level, including debug data.'\n}\n")),(0,o.kt)("h2",{id:"transports"},"Transports"),(0,o.kt)("p",null,"The Idearium logger does not support transports out of the box. See ",(0,o.kt)("a",{parentName:"p",href:"https://idearium.github.io/idearium-lib/docs/log"},"@idearium/log-insightops")," for a transport for InsightOps."))}g.isMDXComponent=!0}}]);