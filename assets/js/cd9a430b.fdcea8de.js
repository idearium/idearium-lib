"use strict";(self.webpackChunkidearium_lib_docs=self.webpackChunkidearium_lib_docs||[]).push([[252],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9555:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s}});var n=r(3117),a=(r(7294),r(3905));const i={id:"telemetry",title:"@idearium/telemetry"},o=void 0,l={unversionedId:"telemetry",id:"telemetry",title:"@idearium/telemetry",description:"The Idearium Open Telemetry implementation.",source:"@site/docs/telemetry.md",sourceDirName:".",slug:"/telemetry",permalink:"/idearium-lib/docs/telemetry",draft:!1,editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/telemetry.md",tags:[],version:"current",frontMatter:{id:"telemetry",title:"@idearium/telemetry"},sidebar:"sidebar",previous:{title:"@idearium/safe-promise",permalink:"/idearium-lib/docs/safe-promise"},next:{title:"@idearium/text-sort",permalink:"/idearium-lib/docs/text-sort"}},u={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Features",id:"features",level:2},{value:"<code>traceId</code> middleware",id:"traceid-middleware",level:3}],c={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Idearium Open Telemetry implementation."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add @idearium/telemetry\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Shell"},"node --require @idearium/telemetry server.js\n")),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"You must have a few environment variables present in order for this package to do anything:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TARGET_ENV")," must be set to something other than ",(0,a.kt)("inlineCode",{parentName:"li"},"local"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TRACE_EXPORTER_ACCOUNT_EMAIL")," must be set to the email of a service account on Google Cloud."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TRACE_EXPORTER_ACCOUNT_SECRET")," must be set to the private key of a service account on Google Cloud."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TRACE_EXPORTER_PROJECT_ID")," must be set to a Project ID on Google Cloud.")),(0,a.kt)("p",null,"You can also have the following optional environment variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OPENTELEMETRY_DEBUG")," set to ",(0,a.kt)("inlineCode",{parentName:"li"},"'true'")," if you want to enable Open Telemetry debugging output in the console."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SVC")," should be set to the name of the app/service to include this information along with the request.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Please note"),": this package hasn't been designed to run locally.")),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("p",null,"There are a few extra features for this package."),(0,a.kt)("h3",{id:"traceid-middleware"},(0,a.kt)("inlineCode",{parentName:"h3"},"traceId")," middleware"),(0,a.kt)("p",null,"If you'd like to expose a ",(0,a.kt)("inlineCode",{parentName:"p"},"x-trace-id")," header with the ",(0,a.kt)("inlineCode",{parentName:"p"},"traceId")," for a particular request, you can do so like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const traceId = require('@idearium/telemetry/middleware/trace-id');\n\nconst bootstrapExpress = (opts) =>\n    new Promise((resolve) => {\n        log.info('Bootstrapping express');\n\n        const { app } = opts;\n\n        app.use(traceId);\n\n        return resolve(opts);\n    });\n")),(0,a.kt)("p",null,"Each request that generates a trace ID, will now include the ID in the ",(0,a.kt)("inlineCode",{parentName:"p"},"x-trace-id")," response header."))}d.isMDXComponent=!0}}]);