"use strict";(self.webpackChunkidearium_lib_docs=self.webpackChunkidearium_lib_docs||[]).push([[583],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),g=i,m=c["".concat(s,".").concat(g)]||c[g]||d[g]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1899:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var r=n(3117),i=(n(7294),n(3905));const o={id:"log-insightops",title:"@idearium/log-insightops"},a=void 0,l={unversionedId:"log-insightops",id:"log-insightops",title:"@idearium/log-insightops",description:"The Idearium logger InsightOps transport.",source:"@site/docs/log-insightops.md",sourceDirName:".",slug:"/log-insightops",permalink:"/idearium-lib/docs/log-insightops",draft:!1,editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/log-insightops.md",tags:[],version:"current",frontMatter:{id:"log-insightops",title:"@idearium/log-insightops"},sidebar:"sidebar",previous:{title:"@idearium/log-http",permalink:"/idearium-lib/docs/log-http"},next:{title:"@idearium/log-structured",permalink:"/idearium-lib/docs/log-structured"}},s={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Combining Transports",id:"combining-transports",level:3}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Idearium logger InsightOps transport."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add @idearium/log-insightops\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"The Idearium logger InsightOps transport takes log output from ",(0,i.kt)("a",{parentName:"p",href:"https://idearium.github.io/idearium-lib/docs/log"},(0,i.kt)("inlineCode",{parentName:"a"},"@idearium/log"))," and sends it to InsightOps."),(0,i.kt)("p",null,"To do so, you will need the configure some environment variables:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INSIGHT_OPS_REGION")," - The InsightOps region."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INSIGHT_OPS_TOKEN")," - The InsightOps token.")),(0,i.kt)("p",null,"Then start your Node application and pipe the output to the ",(0,i.kt)("inlineCode",{parentName:"p"},"insightops")," script (found at ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules/.bin/insightops")," once this package is installed):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ node server.js | insightops\n")),(0,i.kt)("h3",{id:"combining-transports"},"Combining Transports"),(0,i.kt)("p",null,"Sometimes you will want to use multiple transports. To do this you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"tee")," command in bash:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ node server.js | tee insightops pino-stackdriver --project bar --credentials /credentials.json\n")))}d.isMDXComponent=!0}}]);