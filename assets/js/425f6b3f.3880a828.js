"use strict";(self.webpackChunkidearium_lib_docs=self.webpackChunkidearium_lib_docs||[]).push([[277],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2471:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c}});var a=n(3117),r=(n(7294),n(3905));const i={id:"amqp",title:"@idearium/amqp"},s=void 0,o={unversionedId:"amqp",id:"amqp",title:"@idearium/amqp",description:"Explicitly connect to an AMQP server and then publish and consume messages.",source:"@site/docs/amqp.md",sourceDirName:".",slug:"/amqp",permalink:"/idearium-lib/docs/amqp",draft:!1,editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/amqp.md",tags:[],version:"current",frontMatter:{id:"amqp",title:"@idearium/amqp"},sidebar:"sidebar",previous:{title:"About",permalink:"/idearium-lib/docs/"},next:{title:"@idearium/apm",permalink:"/idearium-lib/docs/apm"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Beta installation",id:"beta-installation",level:3},{value:"Usage",id:"usage",level:2},{value:"Connect to an AMQP server",id:"connect-to-an-amqp-server",level:3},{value:"Setup consumers",id:"setup-consumers",level:3},{value:"Publish messages",id:"publish-messages",level:3},{value:"Examples",id:"examples",level:2},{value:"Certificates",id:"certificates",level:3}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Explicitly connect to an AMQP server and then publish and consume messages."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add -E @idearium/amqp\n")),(0,r.kt)("h3",{id:"beta-installation"},"Beta installation"),(0,r.kt)("p",null,"If you need to install a beta version, you can:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add -E @idearium/amqp@beta\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"@idearium/amqp"),", you'll need to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Connect to an AMQP server."),(0,r.kt)("li",{parentName:"ul"},"Setup consumers."),(0,r.kt)("li",{parentName:"ul"},"Publish messages.")),(0,r.kt)("h3",{id:"connect-to-an-amqp-server"},"Connect to an AMQP server"),(0,r.kt)("p",null,"Use the following to create a connection to an AMQP server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const amqp = require('@idearium/amqp');\n\nawait amqp.connect('amqps://localhost:5671')\n")),(0,r.kt)("h3",{id:"setup-consumers"},"Setup consumers"),(0,r.kt)("p",null,"Start by setting up consumers so that messages will be processed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const amqp = require('@idearium/amqp');\n\namqp.consume(\n    'consumer-name',\n    async (data) => {\n        console.log('Consuming data', data);\n\n        return true;\n    },\n    {\n        exchange: 'ampq-test',\n        queue: 'ampq-test',\n        routingKey: 'ampq-test',\n    }\n)\n")),(0,r.kt)("h3",{id:"publish-messages"},"Publish messages"),(0,r.kt)("p",null,"Now you can start publishing messages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const amqp = require('@idearium/amqp');\n\namqp.publish('test-b', { test: true }, {\n    exchange: 'ampq-test',\n    routingKey: 'ampq-test',\n    persistent: true,\n});\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"certificates"},"Certificates"),(0,r.kt)("p",null,"This example shows how to load certificates and pass it to ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," to allow making secured connections."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"// lib/certs.js\n\nconst fs = require('fs/promises');\nconst { join } = require('path');\nconst promiseAllSettled = require('@idearium/promise-all-settled');\n\nconst loadFile = async (path) => fs.readFile(path, 'utf-8');\n\nconst readDir = async (path) => fs.readdir(path);\n\nmodule.exports = async (dir) => {\n    const content = await readDir(dir);\n\n    const certs = {};\n\n    const certPath = content.find((path) => /\\.ce?rt$/.test(path));\n    const keyPath = content.find((path) => /\\.key$/.test(path));\n\n    if (certPath) {\n        certs.crt = await loadFile(join(dir, certPath));\n    }\n\n    if (keyPath) {\n        certs.key = await loadFile(join(dir, keyPath));\n    }\n\n    if (content.includes('ca')) {\n        [, certs.ca] = await promiseAllSettled(\n            (await readDir(join(dir, 'ca')))\n                .filter((path) => /\\.ce?rt$/.test(path))\n                .map((path) => loadFile(join(dir, 'ca', path)))\n        );\n    }\n\n    return certs;\n};\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const amqp = require('@idearium/amqp');\nconst certs = require('./lib/certs');\n\nconst createConnection = async () => {\n    const opts = await certs(`${process.cwd()}/amqp-certs`);\n\n    return client.connect(\n        'amqps://localhost:5671',\n        opts\n    );\n};\n\nmodule.exports = async (opts = {}) => {\n    await createConnection();\n\n    // Setup consumers\n    // Publish messages\n};\n")))}m.isMDXComponent=!0}}]);