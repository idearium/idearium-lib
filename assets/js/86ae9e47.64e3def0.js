"use strict";(self.webpackChunkidearium_lib_docs=self.webpackChunkidearium_lib_docs||[]).push([[298],{3905:function(e,n,o){o.d(n,{Zo:function(){return u},kt:function(){return g}});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function s(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=t.createContext({}),c=function(e){var n=t.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},u=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(o),m=r,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return o?t.createElement(g,a(a({ref:n},u),{},{components:o})):t.createElement(g,a({ref:n},u))}));function g(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=o[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},4913:function(e,n,o){o.r(n),o.d(n,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var t=o(3117),r=(o(7294),o(3905));const i={id:"mongoose",title:"@idearium/mongoose"},a=void 0,s={unversionedId:"mongoose",id:"mongoose",title:"@idearium/mongoose",description:"Mongoose connection defaults.",source:"@site/docs/mongoose.md",sourceDirName:".",slug:"/mongoose",permalink:"/idearium-lib/docs/mongoose",draft:!1,editUrl:"https://github.com/idearium/idearium-lib/tree/master/docusaurus/docs/mongoose.md",tags:[],version:"current",frontMatter:{id:"mongoose",title:"@idearium/mongoose"},sidebar:"sidebar",previous:{title:"@idearium/log-structured",permalink:"/idearium-lib/docs/log-structured"},next:{title:"@idearium/phone",permalink:"/idearium-lib/docs/phone"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Beta installation",id:"beta-installation",level:3},{value:"Usage",id:"usage",level:2},{value:"<code>connect({ mongoose, options = {}, uri })</code>",id:"connect-mongoose-options---uri-",level:4},{value:"<code>createConnections({ mongoose, options = {}, uris })</code>",id:"createconnections-mongoose-options---uris-",level:4},{value:"Examples",id:"examples",level:2},{value:"Self-signed certificates",id:"self-signed-certificates",level:3},{value:"Logging",id:"logging",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...o}=e;return(0,r.kt)(p,(0,t.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Mongoose connection defaults."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Please note"),": mongoose is a peer dependency so you'll need to add it specifically to your project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add -E mongoose@4.11 @idearium/mongoose\n")),(0,r.kt)("h3",{id:"beta-installation"},"Beta installation"),(0,r.kt)("p",null,"If you need to install a beta version, you can:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add -E mongoose@4.11 @idearium/mongoose@beta\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const mongoose = require('mongoose');\nconst { connect } = require('@idearium/mongoose');\n\nconnect({ mongoose, uri: process.env.MONGO_DB_URL, options: { ssl: process.env.MONGO_DB_SSL === 'true' } })\n    .then(() => console.log('Mongoose connected to MongoDB...'))\n")),(0,r.kt)("p",null,"The following are the default options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{\n    reconnectInterval: 500,\n    reconnectTries: Number.MAX_VALUE,\n    sslValidate: Boolean(opts.ssl || opts.tls),\n    useMongoClient: true\n}\n")),(0,r.kt)("p",null,"These can be replaced by adding your own values in an ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," object."),(0,r.kt)("h4",{id:"connect-mongoose-options---uri-"},(0,r.kt)("inlineCode",{parentName:"h4"},"connect({ mongoose, options = {}, uri })")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," function is used to connect Mongoose to MongoDB."),(0,r.kt)("h4",{id:"createconnections-mongoose-options---uris-"},(0,r.kt)("inlineCode",{parentName:"h4"},"createConnections({ mongoose, options = {}, uris })")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"createConnections")," function uses ",(0,r.kt)("inlineCode",{parentName:"p"},"mongoose.createConnection")," to connect Mongoose to multiple databases."),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"uris")," to pass in an array of MongoDB connection strings."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"self-signed-certificates"},"Self-signed certificates"),(0,r.kt)("p",null,"This example shows how to use ",(0,r.kt)("a",{parentName:"p",href:"/idearium-lib/docs/certs"},"@idearium/certs")," to load a self-signed certificate and pass it to ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," to allow making connections to MongoDB instances protected with self-signed certificates."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const mongoose = require('mongoose');\nconst { connect } = require('@idearium/mongoose');\nconst { loadProvidedCerts } = require('@idearium/certs');\n\nmodule.exports = async (uri = process.env.MONGO_DB_URL, options = { ssl: process.env.MONGO_DB_SSL === 'true' }) => {\n\n    const certs = await loadProvidedCerts('/ssl/mongo');\n    const opts = certs.length ? { ...options, sslCA: certs } : options;\n\n    return connect({\n        mongoose,\n        options: opts,\n        uri: dbUrl\n    }).then((console.log('Mongoose connected to MongoDB...')));\n\n}\n")),(0,r.kt)("h2",{id:"logging"},"Logging"),(0,r.kt)("p",null,"This package uses ",(0,r.kt)("a",{parentName:"p",href:"https://idearium.github.io/idearium-lib/docs/log"},"@idearium/log"),". Follow the docs on how to configure it as required."))}d.isMDXComponent=!0}}]);